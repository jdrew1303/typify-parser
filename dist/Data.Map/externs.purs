-- Generated by psc-make version 0.5.5
module Data.Map where
import Prim ()
import Prelude ()
import Data.Array ()
import Data.Maybe ()
import Data.Tuple ()
import Data.Foldable ()
data Map k v
foreign import map :: forall k a b. (a -> b) -> Data.Map.Map k a -> Data.Map.Map k b
foreign import unions :: forall k v. (Prelude.Ord k) => [Data.Map.Map k v] -> Data.Map.Map k v
foreign import union :: forall k v. (Prelude.Ord k) => Data.Map.Map k v -> Data.Map.Map k v -> Data.Map.Map k v
foreign import values :: forall k v. Data.Map.Map k v -> [v]
foreign import keys :: forall k v. Data.Map.Map k v -> [k]
foreign import update :: forall k v. (Prelude.Ord k) => (v -> Data.Maybe.Maybe v) -> k -> Data.Map.Map k v -> Data.Map.Map k v
foreign import alter :: forall k v. (Prelude.Ord k) => (Data.Maybe.Maybe v -> Data.Maybe.Maybe v) -> k -> Data.Map.Map k v -> Data.Map.Map k v
foreign import member :: forall k v. (Prelude.Ord k) => k -> Data.Map.Map k v -> Prim.Boolean
foreign import delete :: forall k v. (Prelude.Ord k) => k -> Data.Map.Map k v -> Data.Map.Map k v
foreign import fromList :: forall k v. (Prelude.Ord k) => [Data.Tuple.Tuple k v] -> Data.Map.Map k v
foreign import toList :: forall k v. Data.Map.Map k v -> [Data.Tuple.Tuple k v]
foreign import lookup :: forall k v. (Prelude.Ord k) => k -> Data.Map.Map k v -> Data.Maybe.Maybe v
foreign import insert :: forall k v. (Prelude.Ord k) => k -> v -> Data.Map.Map k v -> Data.Map.Map k v
foreign import checkValid :: forall k v. Data.Map.Map k v -> Prim.Boolean
foreign import singleton :: forall k v. k -> v -> Data.Map.Map k v
foreign import isEmpty :: forall k v. Data.Map.Map k v -> Prim.Boolean
foreign import empty :: forall k v. Data.Map.Map k v
foreign import showTree :: forall k v. (Prelude.Show k, Prelude.Show v) => Data.Map.Map k v -> Prim.String
foreign import instance eqMap :: (Prelude.Eq k, Prelude.Eq v) => Prelude.Eq (Data.Map.Map k v)
foreign import instance showMap :: (Prelude.Show k, Prelude.Show v) => Prelude.Show (Data.Map.Map k v)
foreign import instance functorMap :: Prelude.Functor (Data.Map.Map k)
