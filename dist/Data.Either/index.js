// Generated by psc-make version 0.5.5
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
function Left(value0) {
    this.value0 = value0;
};
Left.create = function (value0) {
    return new Left(value0);
};
function Right(value0) {
    this.value0 = value0;
};
Right.create = function (value0) {
    return new Right(value0);
};
var showEither = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_68) {
            if (_68 instanceof Left) {
                return "Left (" + (Prelude.show(__dict_Show_0)(_68.value0) + ")");
            };
            if (_68 instanceof Right) {
                return "Right (" + (Prelude.show(__dict_Show_1)(_68.value0) + ")");
            };
            throw new Error("Failed pattern match");
        });
    };
};
var functorEither = function () {
    return new Prelude.Functor(function (_62) {
        return function (_63) {
            if (_63 instanceof Left) {
                return new Left(_63.value0);
            };
            if (_63 instanceof Right) {
                return new Right(_62(_63.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
};
var eqEither = function (__dict_Eq_4) {
    return function (__dict_Eq_5) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqEither(__dict_Eq_4)(__dict_Eq_5))(a)(b);
            };
        }, function (_69) {
            return function (_70) {
                if (_69 instanceof Left && _70 instanceof Left) {
                    return Prelude["=="](__dict_Eq_4)(_69.value0)(_70.value0);
                };
                if (_69 instanceof Right && _70 instanceof Right) {
                    return Prelude["=="](__dict_Eq_5)(_69.value0)(_70.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (__dict_Ord_2) {
    return function (__dict_Ord_3) {
        return new Prelude.Ord(function () {
            return eqEither(__dict_Ord_2["__superclass_Prelude.Eq_0"]())(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
        }, function (_71) {
            return function (_72) {
                if (_71 instanceof Left && _72 instanceof Left) {
                    return Prelude.compare(__dict_Ord_2)(_71.value0)(_72.value0);
                };
                if (_71 instanceof Right && _72 instanceof Right) {
                    return Prelude.compare(__dict_Ord_3)(_71.value0)(_72.value0);
                };
                if (_71 instanceof Left) {
                    return Prelude.LT.value;
                };
                if (_72 instanceof Left) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
};
var either = function (_59) {
    return function (_60) {
        return function (_61) {
            if (_61 instanceof Left) {
                return _59(_61.value0);
            };
            if (_61 instanceof Right) {
                return _60(_61.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
var isRight = either(Prelude["const"](false))(Prelude["const"](true));
var applyEither = function () {
    return new Prelude.Apply(function (_64) {
        return function (_65) {
            if (_64 instanceof Left) {
                return new Left(_64.value0);
            };
            if (_64 instanceof Right) {
                return Prelude["<$>"](functorEither())(_64.value0)(_65);
            };
            throw new Error("Failed pattern match");
        };
    }, functorEither);
};
var bindEither = function () {
    return new Prelude.Bind(either(function (e) {
        return function (_) {
            return new Left(e);
        };
    })(function (a) {
        return function (f) {
            return f(a);
        };
    }), applyEither);
};
var applicativeEither = function () {
    return new Prelude.Applicative(applyEither, Right.create);
};
var monadEither = function () {
    return new Prelude.Monad(applicativeEither, bindEither);
};
var altEither = function () {
    return new Control_Alt.Alt(function (_66) {
        return function (_67) {
            if (_66 instanceof Left) {
                return _67;
            };
            return _66;
        };
    }, functorEither);
};
module.exports = {
    Left: Left, 
    Right: Right, 
    isRight: isRight, 
    isLeft: isLeft, 
    either: either, 
    functorEither: functorEither, 
    applyEither: applyEither, 
    applicativeEither: applicativeEither, 
    altEither: altEither, 
    bindEither: bindEither, 
    monadEither: monadEither, 
    showEither: showEither, 
    eqEither: eqEither, 
    ordEither: ordEither
};
