// Generated by psc-make version 0.5.5
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Math = require("Math");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_ST = require("Control.Monad.ST");
var Data_Map = require("Data.Map");
var Data_Foldable = require("Data.Foldable");
var Data_Traversable = require("Data.Traversable");
var Control_Monad = require("Control.Monad");
var Data_Array = require("Data.Array");
function AcyclicSCC(value0) {
    this.value0 = value0;
};
AcyclicSCC.create = function (value0) {
    return new AcyclicSCC(value0);
};
function CyclicSCC(value0) {
    this.value0 = value0;
};
CyclicSCC.create = function (value0) {
    return new CyclicSCC(value0);
};
function Edge(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
Edge.create = function (value0) {
    return function (value1) {
        return new Edge(value0, value1);
    };
};
function Graph(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
Graph.create = function (value0) {
    return function (value1) {
        return new Graph(value0, value1);
    };
};
var vertices = function (_302) {
    if (_302 instanceof AcyclicSCC) {
        return [ _302.value0 ];
    };
    if (_302 instanceof CyclicSCC) {
        return _302.value0;
    };
    throw new Error("Failed pattern match");
};
var showSCC = function (__dict_Show_0) {
    return new Prelude.Show(function (_312) {
        if (_312 instanceof AcyclicSCC) {
            return "AcyclicSCC (" + (Prelude.show(__dict_Show_0)(_312.value0) + ")");
        };
        if (_312 instanceof CyclicSCC) {
            return "CyclicSCC " + Prelude.show(Prelude.showArray(__dict_Show_0))(_312.value0);
        };
        throw new Error("Failed pattern match");
    });
};
var popUntil = function (__copy___dict_Eq_1) {
    return function (__copy__306) {
        return function (__copy__307) {
            return function (__copy__308) {
                return function (__copy__309) {
                    var __dict_Eq_1 = __copy___dict_Eq_1;
                    var _306 = __copy__306;
                    var _307 = __copy__307;
                    var _308 = __copy__308;
                    var _309 = __copy__309;
                    tco: while (true) {
                        if (_308.length === 0) {
                            return {
                                path: [  ], 
                                component: _309
                            };
                        };
                        if (_308.length >= 1) {
                            var _1330 = _308.slice(1);
                            if (Prelude["=="](__dict_Eq_1)(_306(_307))(_306(_308[0]))) {
                                return {
                                    path: _1330, 
                                    component: Prelude[":"](_308[0])(_309)
                                };
                            };
                        };
                        if (_308.length >= 1) {
                            var _1332 = _308.slice(1);
                            var __tco___dict_Eq_1 = __dict_Eq_1;
                            var __tco__306 = _306;
                            var __tco__307 = _307;
                            var __tco__309 = Prelude[":"](_308[0])(_309);
                            __dict_Eq_1 = __tco___dict_Eq_1;
                            _306 = __tco__306;
                            _307 = __tco__307;
                            _308 = _1332;
                            _309 = __tco__309;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
    };
};
var maybeMin = function (_310) {
    return function (_311) {
        if (_311 instanceof Data_Maybe.Nothing) {
            return new Data_Maybe.Just(_310);
        };
        if (_311 instanceof Data_Maybe.Just) {
            return Data_Maybe.Just.create(Math.min(_310)(_311.value0));
        };
        throw new Error("Failed pattern match");
    };
};
var scc$prime = function (__dict_Eq_2) {
    return function (__dict_Ord_3) {
        return function (_303) {
            return function (_304) {
                return function (_305) {
                    return Control_Monad_Eff.runPure(function __do() {
                        var _20 = {
                            value: 0
                        };
                        var _19 = {
                            value: [  ]
                        };
                        var _18 = {
                            value: Data_Map.empty
                        };
                        var _17 = {
                            value: Data_Map.empty
                        };
                        var _16 = {
                            value: [  ]
                        };
                        return (function () {
                            var lowlinkOfKey = function (k) {
                                return function __do() {
                                    return Data_Map.lookup(__dict_Ord_3)(k)(_17.value);
                                };
                            };
                            var lowlinkOf = function (v) {
                                return lowlinkOfKey(_303(v));
                            };
                            var isCycle = function (k) {
                                return Data_Foldable.any(Data_Foldable.foldableArray())(function (_301) {
                                    return Prelude["=="](__dict_Eq_2)(_301.value0)(k) && Prelude["=="](__dict_Eq_2)(_301.value1)(k);
                                })(_305.value1);
                            };
                            var makeComponent = function (_316) {
                                if (_316.length === 1 && !isCycle(_303(_316[0]))) {
                                    return new AcyclicSCC(_316[0]);
                                };
                                return new CyclicSCC(_316);
                            };
                            var indexOfKey = function (k) {
                                return function __do() {
                                    return Data_Map.lookup(__dict_Ord_3)(k)(_18.value);
                                };
                            };
                            var strongConnect = function (k) {
                                var v = _304(k);
                                return function __do() {
                                    var _15 = _20.value;
                                    _18.value = Data_Map.insert(__dict_Ord_3)(k)(_15)(_18.value);
                                    _17.value = Data_Map.insert(__dict_Ord_3)(k)(_15)(_17.value);
                                    _20.value = _15 + 1;
                                    _19.value = Prelude[":"](v)(_19.value);
                                    Data_Traversable["for"](Control_Monad_Eff.applicativeEff())(Data_Traversable.traversableArray())(_305.value1)(function (_300) {
                                        return Control_Monad.when(Control_Monad_Eff.monadEff())(Prelude["=="](__dict_Eq_2)(k)(_300.value0))(function __do() {
                                            var _11 = indexOfKey(_300.value1)();
                                            return (function () {
                                                if (_11 instanceof Data_Maybe.Nothing) {
                                                    var w = _304(_300.value1);
                                                    return function __do() {
                                                        strongConnect(_300.value1)();
                                                        var _8 = lowlinkOfKey(_300.value1)();
                                                        return Data_Foldable.for_(Control_Monad_Eff.applicativeEff())(Data_Foldable.foldableMaybe())(_8)(function (lowlink) {
                                                            return Control_Monad_ST.modifySTRef(_17)(Data_Map.alter(__dict_Ord_3)(maybeMin(lowlink))(k));
                                                        })();
                                                    };
                                                };
                                                return Control_Monad.when(Control_Monad_Eff.monadEff())(Data_Foldable.elem(__dict_Eq_2)(Data_Foldable.foldableArray())(_300.value1)(Data_Array.map(_303)(_19.value)))(function __do() {
                                                    var _9 = indexOfKey(_300.value1)();
                                                    return Data_Foldable.for_(Control_Monad_Eff.applicativeEff())(Data_Foldable.foldableMaybe())(_9)(function (index_1) {
                                                        return Control_Monad_ST.modifySTRef(_17)(Data_Map.alter(__dict_Ord_3)(maybeMin(index_1))(k));
                                                    })();
                                                });
                                            })()();
                                        });
                                    })();
                                    var _14 = indexOfKey(k)();
                                    var _13 = lowlinkOfKey(k)();
                                    return Control_Monad.when(Control_Monad_Eff.monadEff())(Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqNumber()))(_14)(_13))(function __do() {
                                        var _12 = _19.value;
                                        return (function () {
                                            var newPath = popUntil(__dict_Eq_2)(_303)(v)(_12)([  ]);
                                            return function __do() {
                                                _16.value = Prelude.flip(Prelude["++"](Data_Array.semigroupArray()))([ makeComponent(newPath.component) ])(_16.value);
                                                _19.value = newPath.path;
                                                return Prelude.unit;
                                            };
                                        })()();
                                    })();
                                };
                            };
                            var indexOf = function (v) {
                                return indexOfKey(_303(v));
                            };
                            var go = function (_315) {
                                if (_315.length === 0) {
                                    return Control_Monad_ST.readSTRef(_16);
                                };
                                if (_315.length >= 1) {
                                    var _1366 = _315.slice(1);
                                    return function __do() {
                                        var _7 = indexOf(_315[0])();
                                        Control_Monad.when(Control_Monad_Eff.monadEff())(Data_Maybe.isNothing(_7))(strongConnect(_303(_315[0])))();
                                        return go(_1366)();
                                    };
                                };
                                throw new Error("Failed pattern match");
                            };
                            return go(_305.value0);
                        })()();
                    });
                };
            };
        };
    };
};
var scc = function (__dict_Eq_4) {
    return function (__dict_Ord_5) {
        return scc$prime(__dict_Eq_4)(__dict_Ord_5)(Prelude.id(Prelude.categoryArr()))(Prelude.id(Prelude.categoryArr()));
    };
};
var topSort$prime = function (__dict_Eq_6) {
    return function (__dict_Ord_7) {
        return function (makeKey) {
            return function (makeVert) {
                return Prelude["<<<"](Prelude.semigroupoidArr())(Data_Array.reverse)(Prelude["<<<"](Prelude.semigroupoidArr())(Data_Array.concatMap(vertices))(scc$prime(__dict_Eq_6)(__dict_Ord_7)(makeKey)(makeVert)));
            };
        };
    };
};
var topSort = function (__dict_Eq_8) {
    return function (__dict_Ord_9) {
        return topSort$prime(__dict_Eq_8)(__dict_Ord_9)(Prelude.id(Prelude.categoryArr()))(Prelude.id(Prelude.categoryArr()));
    };
};
var eqSCC = function (__dict_Eq_10) {
    return new Prelude.Eq(function (scc1) {
        return function (scc2) {
            return !Prelude["=="](eqSCC(__dict_Eq_10))(scc1)(scc2);
        };
    }, function (_313) {
        return function (_314) {
            if (_313 instanceof AcyclicSCC && _314 instanceof AcyclicSCC) {
                return Prelude["=="](__dict_Eq_10)(_313.value0)(_314.value0);
            };
            if (_313 instanceof CyclicSCC && _314 instanceof CyclicSCC) {
                return Prelude["=="](Prelude.eqArray(__dict_Eq_10))(_313.value0)(_314.value0);
            };
            return false;
        };
    });
};
module.exports = {
    AcyclicSCC: AcyclicSCC, 
    CyclicSCC: CyclicSCC, 
    Graph: Graph, 
    Edge: Edge, 
    "topSort'": topSort$prime, 
    topSort: topSort, 
    "scc'": scc$prime, 
    scc: scc, 
    vertices: vertices, 
    showSCC: showSCC, 
    eqSCC: eqSCC
};
