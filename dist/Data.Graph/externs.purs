-- Generated by psc-make version 0.5.5
module Data.Graph where
import Prim ()
import Prelude ()
import Data.Maybe ()
import Data.Array ()
import Data.Foldable ()
import Data.Traversable ()
import Control.Monad ()
import Control.Monad.Eff ()
import Control.Monad.ST ()
import Data.Map ()
import Data.Set ()
data SCC v = AcyclicSCC v | CyclicSCC [v]
data Graph k v = Graph [v] [Data.Graph.Edge k]
data Edge k = Edge k k
foreign import topSort' :: forall k v. (Prelude.Eq k, Prelude.Ord k) => (v -> k) -> (k -> v) -> Data.Graph.Graph k v -> [v]
foreign import topSort :: forall v. (Prelude.Eq v, Prelude.Ord v) => Data.Graph.Graph v v -> [v]
foreign import scc' :: forall k v. (Prelude.Eq k, Prelude.Ord k) => (v -> k) -> (k -> v) -> Data.Graph.Graph k v -> [Data.Graph.SCC v]
foreign import scc :: forall v. (Prelude.Eq v, Prelude.Ord v) => Data.Graph.Graph v v -> [Data.Graph.SCC v]
foreign import vertices :: forall v. Data.Graph.SCC v -> [v]
foreign import instance showSCC :: (Prelude.Show v) => Prelude.Show (Data.Graph.SCC v)
foreign import instance eqSCC :: (Prelude.Eq v) => Prelude.Eq (Data.Graph.SCC v)
