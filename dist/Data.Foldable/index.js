// Generated by psc-make version 0.5.5
"use strict";
var Prelude = require("Prelude");
var Control_Apply = require("Control.Apply");
var Data_Monoid = require("Data.Monoid");
var Data_Tuple = require("Data.Tuple");
var Data_Eq = require("Data.Eq");
var Data_Maybe = require("Data.Maybe");
var Data_Either = require("Data.Either");
var Data_Monoid_First = require("Data.Monoid.First");
function Foldable(foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};
function foldrArray(f) {  return function(z) {    return function(xs) {      var acc = z;      for (var i = xs.length - 1; i >= 0; --i) {        acc = f(xs[i])(acc);      }      return acc;    }  }};
function foldlArray(f) {  return function(z) {    return function(xs) {      var acc = z;      for (var i = 0, len = xs.length; i < len; ++i) {        acc = f(acc)(xs[i]);      }      return acc;    }  }};
var foldr = function (dict) {
    return dict.foldr;
};
var traverse_ = function (__dict_Applicative_0) {
    return function (__dict_Foldable_1) {
        return function (f) {
            return foldr(__dict_Foldable_1)(Prelude["<<<"](Prelude.semigroupoidArr())(Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
        };
    };
};
var for_ = function (__dict_Applicative_2) {
    return function (__dict_Foldable_3) {
        return Prelude.flip(traverse_(__dict_Applicative_2)(__dict_Foldable_3));
    };
};
var sequence_ = function (__dict_Applicative_4) {
    return function (__dict_Foldable_5) {
        return traverse_(__dict_Applicative_4)(__dict_Foldable_5)(Prelude.id(Prelude.categoryArr()));
    };
};
var foldl = function (dict) {
    return dict.foldl;
};
var mconcat = function (__dict_Foldable_6) {
    return function (__dict_Monoid_7) {
        return foldl(__dict_Foldable_6)(Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_7));
    };
};
var or = function (__dict_Foldable_8) {
    return foldl(__dict_Foldable_8)(Prelude["||"](Prelude.boolLikeBoolean()))(false);
};
var product = function (__dict_Foldable_9) {
    return foldl(__dict_Foldable_9)(Prelude["*"](Prelude.numNumber()))(1);
};
var sum = function (__dict_Foldable_10) {
    return foldl(__dict_Foldable_10)(Prelude["+"](Prelude.numNumber()))(0);
};
var foldableTuple = function () {
    return new Foldable(function (__dict_Monoid_11) {
        return function (_230) {
            return function (_231) {
                return _230(_231.value1);
            };
        };
    }, function (_227) {
        return function (_228) {
            return function (_229) {
                return _227(_228)(_229.value1);
            };
        };
    }, function (_224) {
        return function (_225) {
            return function (_226) {
                return _224(_226.value1)(_225);
            };
        };
    });
};
var foldableRef = function () {
    return new Foldable(function (__dict_Monoid_12) {
        return function (_222) {
            return function (_223) {
                return _222(_223);
            };
        };
    }, function (_219) {
        return function (_220) {
            return function (_221) {
                return _219(_220)(_221);
            };
        };
    }, function (_216) {
        return function (_217) {
            return function (_218) {
                return _216(_218)(_217);
            };
        };
    });
};
var foldableMaybe = function () {
    return new Foldable(function (__dict_Monoid_13) {
        return function (_214) {
            return function (_215) {
                if (_215 instanceof Data_Maybe.Nothing) {
                    return Data_Monoid.mempty(__dict_Monoid_13);
                };
                if (_215 instanceof Data_Maybe.Just) {
                    return _214(_215.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_211) {
        return function (_212) {
            return function (_213) {
                if (_213 instanceof Data_Maybe.Nothing) {
                    return _212;
                };
                if (_213 instanceof Data_Maybe.Just) {
                    return _211(_212)(_213.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_208) {
        return function (_209) {
            return function (_210) {
                if (_210 instanceof Data_Maybe.Nothing) {
                    return _209;
                };
                if (_210 instanceof Data_Maybe.Just) {
                    return _208(_210.value0)(_209);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
};
var foldableEither = function () {
    return new Foldable(function (__dict_Monoid_14) {
        return function (_206) {
            return function (_207) {
                if (_207 instanceof Data_Either.Left) {
                    return Data_Monoid.mempty(__dict_Monoid_14);
                };
                if (_207 instanceof Data_Either.Right) {
                    return _206(_207.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_203) {
        return function (_204) {
            return function (_205) {
                if (_205 instanceof Data_Either.Left) {
                    return _204;
                };
                if (_205 instanceof Data_Either.Right) {
                    return _203(_204)(_205.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_200) {
        return function (_201) {
            return function (_202) {
                if (_202 instanceof Data_Either.Left) {
                    return _201;
                };
                if (_202 instanceof Data_Either.Right) {
                    return _200(_202.value0)(_201);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
};
var foldableArray = function () {
    return new Foldable(function (__dict_Monoid_15) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray())(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_15["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_15))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
};
var foldMap = function (dict) {
    return dict.foldMap;
};
var lookup = function (__dict_Eq_16) {
    return function (__dict_Foldable_17) {
        return function (a) {
            return function (f) {
                return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_17)(Data_Monoid_First.monoidFirst())(function (_199) {
                    return Prelude["=="](__dict_Eq_16)(a)(_199.value0) ? new Data_Maybe.Just(_199.value1) : Data_Maybe.Nothing.value;
                })(f));
            };
        };
    };
};
var fold = function (__dict_Foldable_18) {
    return function (__dict_Monoid_19) {
        return foldMap(__dict_Foldable_18)(__dict_Monoid_19)(Prelude.id(Prelude.categoryArr()));
    };
};
var find = function (__dict_Foldable_20) {
    return function (p) {
        return function (f) {
            var _670 = foldMap(__dict_Foldable_20)(Data_Monoid.monoidArray())(function (x) {
                return p(x) ? [ x ] : [  ];
            })(f);
            if (_670.length >= 1) {
                var _672 = _670.slice(1);
                return new Data_Maybe.Just(_670[0]);
            };
            if (_670.length === 0) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var any = function (__dict_Foldable_21) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr())(or(foldableArray()))(foldMap(__dict_Foldable_21)(Data_Monoid.monoidArray())(function (x) {
            return [ p(x) ];
        }));
    };
};
var elem = function (__dict_Eq_22) {
    return function (__dict_Foldable_23) {
        return Prelude["<<<"](Prelude.semigroupoidArr())(any(__dict_Foldable_23))(Prelude["=="](__dict_Eq_22));
    };
};
var notElem = function (__dict_Eq_24) {
    return function (__dict_Foldable_25) {
        return function (x) {
            return Prelude["<<<"](Prelude.semigroupoidArr())(Prelude.not(Prelude.boolLikeBoolean()))(elem(__dict_Eq_24)(__dict_Foldable_25)(x));
        };
    };
};
var and = function (__dict_Foldable_26) {
    return foldl(__dict_Foldable_26)(Prelude["&&"](Prelude.boolLikeBoolean()))(true);
};
var all = function (__dict_Foldable_27) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr())(and(foldableArray()))(foldMap(__dict_Foldable_27)(Data_Monoid.monoidArray())(function (x) {
            return [ p(x) ];
        }));
    };
};
module.exports = {
    Foldable: Foldable, 
    foldlArray: foldlArray, 
    foldrArray: foldrArray, 
    lookup: lookup, 
    find: find, 
    notElem: notElem, 
    elem: elem, 
    product: product, 
    sum: sum, 
    all: all, 
    any: any, 
    or: or, 
    and: and, 
    mconcat: mconcat, 
    sequence_: sequence_, 
    for_: for_, 
    traverse_: traverse_, 
    fold: fold, 
    foldMap: foldMap, 
    foldl: foldl, 
    foldr: foldr, 
    foldableArray: foldableArray, 
    foldableEither: foldableEither, 
    foldableMaybe: foldableMaybe, 
    foldableRef: foldableRef, 
    foldableTuple: foldableTuple
};
