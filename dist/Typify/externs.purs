-- Generated by psc-make version 0.5.5
module Typify where
import Prim ()
import Prelude ()
import Data.Tuple ()
import Data.Map ()
import Data.Maybe ()
import Control.Alt ()
import Control.Plus ()
import Control.Alternative ()
import Debug.Trace ()
data Parser tok a = Parser ([tok] -> Data.Maybe.Maybe (Data.Tuple.Tuple [tok] a))
foreign import data JsType :: *
data Type  = TyTrue  | TyFalse  | TyUnit  | TyNumber Prim.Number | TyString Prim.String | TyBool Prim.Boolean | TyRecord (Data.Map.Map Typify.Name Typify.Type) | TyIdentifier Typify.Name | TyNamed Typify.Name Typify.Type | TyConjunction [Typify.Type] | TyDisjunction [Typify.Type] | TyProduct [Typify.Type] | TyOptional Typify.Type | TyVariadic Typify.Type | TyBrackets Typify.Type | TyApplication Typify.Type [Typify.Type] | TyFunction Typify.Type Typify.Type
type Name  = Prim.String
foreign import parse :: Prim.String -> Typify.JsType
foreign import token :: forall tok. (Prelude.Eq tok) => tok -> Typify.Parser tok tok
foreign import tokenWith :: forall tok. (tok -> Prim.Boolean) -> Typify.Parser tok tok
foreign import eof :: forall tok. Typify.Parser tok Prelude.Unit
foreign import altImpl :: forall a tok. ([tok] -> Data.Maybe.Maybe (Data.Tuple.Tuple [tok] a)) -> ([tok] -> Data.Maybe.Maybe (Data.Tuple.Tuple [tok] a)) -> [tok] -> Data.Maybe.Maybe (Data.Tuple.Tuple [tok] a)
foreign import applyImpl :: forall a b tok. ([tok] -> Data.Maybe.Maybe (Data.Tuple.Tuple [tok] (a -> b))) -> ([tok] -> Data.Maybe.Maybe (Data.Tuple.Tuple [tok] a)) -> [tok] -> Data.Maybe.Maybe (Data.Tuple.Tuple [tok] b)
foreign import second :: forall a b c. (a -> b) -> Data.Tuple.Tuple c a -> Data.Tuple.Tuple c b
foreign import jsFalse :: Typify.JsType
foreign import jsTrue :: Typify.JsType
foreign import instance functorParser :: Prelude.Functor (Typify.Parser tok)
foreign import instance applyParser :: Prelude.Apply (Typify.Parser tok)
foreign import instance applicativeParser :: Prelude.Applicative (Typify.Parser tok)
foreign import instance altParser :: Control.Alt.Alt (Typify.Parser tok)
foreign import instance plusParser :: Control.Plus.Plus (Typify.Parser tok)
foreign import instance alternativeParser :: Control.Alternative.Alternative (Typify.Parser tok)
