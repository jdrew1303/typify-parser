// Generated by psc-make version 0.5.5
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
function Parser(value0) {
    this.value0 = value0;
};
Parser.create = function (value0) {
    return new Parser(value0);
};
function TyTrue() {

};
TyTrue.value = new TyTrue();
function TyFalse() {

};
TyFalse.value = new TyFalse();
function TyUnit() {

};
TyUnit.value = new TyUnit();
function TyNumber(value0) {
    this.value0 = value0;
};
TyNumber.create = function (value0) {
    return new TyNumber(value0);
};
function TyString(value0) {
    this.value0 = value0;
};
TyString.create = function (value0) {
    return new TyString(value0);
};
function TyBool(value0) {
    this.value0 = value0;
};
TyBool.create = function (value0) {
    return new TyBool(value0);
};
function TyRecord(value0) {
    this.value0 = value0;
};
TyRecord.create = function (value0) {
    return new TyRecord(value0);
};
function TyIdentifier(value0) {
    this.value0 = value0;
};
TyIdentifier.create = function (value0) {
    return new TyIdentifier(value0);
};
function TyNamed(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
TyNamed.create = function (value0) {
    return function (value1) {
        return new TyNamed(value0, value1);
    };
};
function TyConjunction(value0) {
    this.value0 = value0;
};
TyConjunction.create = function (value0) {
    return new TyConjunction(value0);
};
function TyDisjunction(value0) {
    this.value0 = value0;
};
TyDisjunction.create = function (value0) {
    return new TyDisjunction(value0);
};
function TyProduct(value0) {
    this.value0 = value0;
};
TyProduct.create = function (value0) {
    return new TyProduct(value0);
};
function TyOptional(value0) {
    this.value0 = value0;
};
TyOptional.create = function (value0) {
    return new TyOptional(value0);
};
function TyVariadic(value0) {
    this.value0 = value0;
};
TyVariadic.create = function (value0) {
    return new TyVariadic(value0);
};
function TyBrackets(value0) {
    this.value0 = value0;
};
TyBrackets.create = function (value0) {
    return new TyBrackets(value0);
};
function TyApplication(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
TyApplication.create = function (value0) {
    return function (value1) {
        return new TyApplication(value0, value1);
    };
};
function TyFunction(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
TyFunction.create = function (value0) {
    return function (value1) {
        return new TyFunction(value0, value1);
    };
};
var jsTrue = { type: 'true' };
var jsFalse = { type: 'false' };
var tokenWith = function (f) {
    var p = function (_12) {
        if (_12.length >= 1) {
            var _15 = _12.slice(1);
            if (f(_12[0])) {
                return new Data_Maybe.Just(new Data_Tuple.Tuple(_15, _12[0]));
            };
        };
        return Data_Maybe.Nothing.value;
    };
    return new Parser(p);
};
var token = function (__dict_Eq_0) {
    return function (t) {
        return tokenWith(Prelude["=="](__dict_Eq_0)(t));
    };
};
var second = function (_2) {
    return function (_3) {
        return new Data_Tuple.Tuple(_3.value0, _2(_3.value1));
    };
};
var parse = function (_4) {
    return jsFalse;
};
var functorParser = function () {
    return new Prelude.Functor(function (_5) {
        return function (_6) {
            return new Parser(function (s) {
                return Prelude["<$>"](Data_Maybe.functorMaybe())(second(_5))(_6.value0(s));
            });
        };
    });
};
var eof = (function () {
    var eofImpl = function (_11) {
        if (_11.length === 0) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple([  ], Prelude.unit));
        };
        return Data_Maybe.Nothing.value;
    };
    return new Parser(eofImpl);
})();
var applyImpl = function (f) {
    return function (x) {
        return function (s) {
            return Prelude[">>="](Data_Maybe.bindMaybe())(f(s))(function (_1) {
                return Prelude[">>="](Data_Maybe.bindMaybe())(x(_1.value0))(function (_0) {
                    return Prelude["return"](Data_Maybe.monadMaybe())(new Data_Tuple.Tuple(_0.value0, _1.value1(_0.value1)));
                });
            });
        };
    };
};
var applyParser = function () {
    return new Prelude.Apply(function (_7) {
        return function (_8) {
            return new Parser(applyImpl(_7.value0)(_8.value0));
        };
    }, functorParser);
};
var applicativeParser = function () {
    return new Prelude.Applicative(applyParser, function (x) {
        return new Parser(function (s) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(s, x));
        });
    });
};
var altImpl = function (p) {
    return function (q) {
        return function (s) {
            return Control_Alt["<|>"](Data_Maybe.altMaybe())(p(s))(q(s));
        };
    };
};
var altParser = function () {
    return new Control_Alt.Alt(function (_9) {
        return function (_10) {
            return new Parser(altImpl(_9.value0)(_10.value0));
        };
    }, functorParser);
};
var plusParser = function () {
    return new Control_Plus.Plus(altParser, new Parser(function (_) {
        return Data_Maybe.Nothing.value;
    }));
};
var alternativeParser = function () {
    return new Control_Alternative.Alternative(plusParser, applicativeParser);
};
module.exports = {
    Parser: Parser, 
    TyTrue: TyTrue, 
    TyFalse: TyFalse, 
    TyUnit: TyUnit, 
    TyNumber: TyNumber, 
    TyString: TyString, 
    TyBool: TyBool, 
    TyRecord: TyRecord, 
    TyIdentifier: TyIdentifier, 
    TyNamed: TyNamed, 
    TyConjunction: TyConjunction, 
    TyDisjunction: TyDisjunction, 
    TyProduct: TyProduct, 
    TyOptional: TyOptional, 
    TyVariadic: TyVariadic, 
    TyBrackets: TyBrackets, 
    TyApplication: TyApplication, 
    TyFunction: TyFunction, 
    parse: parse, 
    token: token, 
    tokenWith: tokenWith, 
    eof: eof, 
    altImpl: altImpl, 
    applyImpl: applyImpl, 
    second: second, 
    jsFalse: jsFalse, 
    jsTrue: jsTrue, 
    functorParser: functorParser, 
    applyParser: applyParser, 
    applicativeParser: applicativeParser, 
    altParser: altParser, 
    plusParser: plusParser, 
    alternativeParser: alternativeParser
};
